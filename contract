// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
Website: https://www.rvls.io
X/Twitter: https://x.com/RVLSToken
Telegram: https://t.me/rvlstokenchannel
**/

contract ERC20 {
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;
    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    constructor(string memory _name, string memory _symbol) {
        name = _name;
        symbol = _symbol;
        decimals = 18;
    }

    function transfer(address to, uint256 value) public virtual returns (bool) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");
        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }

    function approve(address spender, uint256 value) public returns (bool) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {
        require(balanceOf[from] >= value, "Insufficient balance");
        require(allowance[from][msg.sender] >= value, "Allowance exceeded");
        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;
        emit Transfer(from, to, value);
        return true;
    }

    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "Mint to the zero address");
        totalSupply += amount;
        balanceOf[account] += amount;
        emit Transfer(address(0), account, amount);
    }

    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "Burn from the zero address");
        require(balanceOf[account] >= amount, "Burn amount exceeds balance");
        totalSupply -= amount;
        balanceOf[account] -= amount;
        emit Transfer(account, address(0), amount);
    }

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract Ownable {
    address public owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Caller is not the owner");
        _;
    }

    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0), "New owner is the zero address");
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
}

contract ReentrancyGuard {
    uint256 private _guardCounter;

    constructor() {
        _guardCounter = 1;
    }

    modifier nonReentrant() {
        require(_guardCounter == 1, "ReentrancyGuard: reentrant call");
        _guardCounter = 2;
        _;
        _guardCounter = 1;
    }
}

interface IUniswapV2Router02 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);
    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);
}

interface IUniswapV2Factory {
    function createPair(address tokenA, address tokenB) external returns (address pair);
}

contract RivalsToken is ERC20, Ownable, ReentrancyGuard {
    uint256 public constant MAX_SUPPLY = 500_000_000 * 10**18; // 500 million tokens
    uint256 public constant BUY_TAX = 3; // Buy tax is set to 3%
    uint256 public constant SELL_TAX = 3; // Sell tax is set to 3%
    
    address public donationWallet;
    address public liquidityPool;
    
    // Addresses for different allocations
    address public teamWallet;
    address public marketingWallet;
    address public p2eWallet;
    address public liquidityRewardsWallet;

    // Locking mechanism for team tokens
    uint256 public teamTokenUnlockDuration; // Duration in seconds
    uint256 public teamTokenUnlockTime; // Timestamp when tokens unlock // Events for tracking token transfers and allocations
    event TokensAllocated(address indexed to, uint256 amount);
    event TokensUnlocked(address indexed to, uint256 amount);

    constructor() ERC20("Rivals Token", "RVLS") {
        totalSupply = MAX_SUPPLY;
        balanceOf[msg.sender] = totalSupply; // Assign all tokens to the deployer
        donationWallet = msg.sender; // Set the donation wallet to the deployer initially
        teamWallet = msg.sender; // Set the team wallet to the deployer initially
        marketingWallet = msg.sender; // Set the marketing wallet to the deployer initially
        p2eWallet = msg.sender; // Set the P2E wallet to the deployer initially
        liquidityRewardsWallet = msg.sender; // Set the liquidity rewards wallet to the deployer initially
    }

    function setDonationWallet(address _donationWallet) external onlyOwner {
        donationWallet = _donationWallet;
    }

    function setLiquidityPool(address _liquidityPool) external onlyOwner {
        liquidityPool = _liquidityPool;
    }

    function allocateTokens(address to, uint256 amount) external onlyOwner {
        require(totalSupply + amount <= MAX_SUPPLY, "Exceeds max supply");
        balanceOf[to] += amount;
        totalSupply += amount;
        emit TokensAllocated(to, amount);
    }

    function unlockTeamTokens() external onlyOwner {
        require(block.timestamp >= teamTokenUnlockTime + teamTokenUnlockDuration, "Tokens are still locked");
        uint256 amount = balanceOf[teamWallet];
        balanceOf[teamWallet] = 0; // Reset balance to prevent re-entrancy
        emit TokensUnlocked(teamWallet, amount);
    }

    function setTeamTokenUnlockDuration(uint256 duration) external onlyOwner {
        teamTokenUnlockDuration = duration;
    }

    function setTeamTokenUnlockTime(uint256 unlockTime) external onlyOwner {
        teamTokenUnlockTime = unlockTime;
    }

    function transfer(address to, uint256 value) public override returns (bool) {
        uint256 tax = (value * SELL_TAX) / 100;
        uint256 amountAfterTax = value - tax;
        balanceOf[msg.sender] -= value;
        balanceOf[to] += amountAfterTax;
        balanceOf[donationWallet] += tax; // Transfer tax to donation wallet
        emit Transfer(msg.sender, to, amountAfterTax);
        emit Transfer(msg.sender, donationWallet, tax);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public override returns (bool) {
        uint256 tax = (value * SELL_TAX) / 100;
        uint256 amountAfterTax = value - tax;
        allowance[from][msg.sender] -= value;
        balanceOf[from] -= value;
        balanceOf[to] += amountAfterTax;
        balanceOf[donationWallet] += tax; // Transfer tax to donation wallet
        emit Transfer(from, to, amountAfterTax);
        emit Transfer(from, donationWallet, tax);
        return true;
    }
}
